@model List<EasyBuy.Models.Order>

@{
    ViewBag.Title = "Đơn hàng của tôi";
    Layout = "~/Views/Layout/_LayoutUser.cshtml";
}

@section Scripts {
    <script>
        // Filter orders
        function filterOrders(status) {
            const cards = document.querySelectorAll('.order-card');
            const buttons = document.querySelectorAll('.filter-btn');
            
            // Update button states
            buttons.forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[data-status="${status}"]`).classList.add('active');
            
            cards.forEach(card => {
                const cardStatus = card.getAttribute('data-status');
                if (status === 'all' || cardStatus === status) {
                    card.style.display = 'block';
                    card.style.animation = 'fadeInUp 0.3s ease-out forwards';
                } else {
                    card.style.display = 'none';
                }
            });
            
            updateResultCount();
        }
        
        // Search orders
        function searchOrders() {
            const searchTerm = document.getElementById('orderSearch').value.toLowerCase();
            const cards = document.querySelectorAll('.order-card');
            
            cards.forEach(card => {
                const orderId = card.querySelector('.order-id').textContent.toLowerCase();
                const products = card.querySelector('.product-list').textContent.toLowerCase();
                
                if (orderId.includes(searchTerm) || products.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
            
            updateResultCount();
        }
        
        // Update result count
        function updateResultCount() {
            const visibleCards = document.querySelectorAll('.order-card[style*="block"]');
            const countElement = document.querySelector('.result-count');
            countElement.textContent = `${visibleCards.length} đơn hàng`;
        }
        
        // Toggle order details
        function toggleOrderDetails(button, orderId) {
            const details = document.getElementById(`details-${orderId}`);
            const icon = button.querySelector('i');
            
            if (details.style.display === 'none' || !details.style.display) {
                details.style.display = 'block';
                details.style.animation = 'fadeInDown 0.3s ease-out forwards';
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
                button.title = 'Ẩn chi tiết';
            } else {
                details.style.display = 'none';
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
                button.title = 'Xem chi tiết';
            }
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Add fade-in animation to cards
            const cards = document.querySelectorAll('.order-card');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
                card.classList.add('fade-in');
            });
            
            updateResultCount();
        });
    </script>
    
    <style>
        .orders-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }
        
        .page-header {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .page-title {
            font-size: 2.5rem;
            font-weight: 800;
            color: var(--dark-color);
            margin-bottom: 1rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .page-subtitle {
            font-size: 1.1rem;
            color: var(--text-muted);
            margin-bottom: 2rem;
        }
        
        .controls-section {
            background: white;
            padding: 1.5rem;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
        }
        
        .search-box {
            position: relative;
            max-width: 400px;
            margin-bottom: 1.5rem;
        }
        
        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 3rem;
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            outline: none;
        }
        
        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
        }
        
        .filter-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 0.5rem 1.5rem;
            border: 2px solid var(--border-color);
            background: white;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .filter-btn:hover {
            border-color: var(--primary-color);
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }
        
        .filter-btn.active {
            background: var(--primary-gradient);
            color: white;
            border-color: transparent;
        }
        
        .result-info {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
            padding: 0 0.5rem;
        }
        
        .result-count {
            font-weight: 600;
            color: var(--dark-color);
        }
        
        .order-card {
            background: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            margin-bottom: 1.5rem;
            overflow: hidden;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            opacity: 0;
            transform: translateY(30px);
        }
        
        .order-card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }
        
        .order-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
        }
        
        .order-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .order-id {
            font-size: 1.2rem;
            font-weight: 700;
            color: var(--dark-color);
        }
        
        .order-date {
            color: var(--text-muted);
            font-size: 0.9rem;
        }
        
        .order-status {
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-pending {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }
        
        .status-confirmed {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status-shipping {
            background: #cce7ff;
            color: #004085;
            border: 1px solid #b3d7ff;
        }
        
        .status-delivered {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        .status-cancelled {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f1b0b7;
        }
        
        .order-body {
            padding: 1.5rem;
        }
        
        .order-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .summary-item {
            text-align: center;
            padding: 1rem;
            background: #f8fafc;
            border-radius: var(--border-radius);
            border: 1px solid var(--border-color);
        }
        
        .summary-label {
            font-size: 0.875rem;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .summary-value {
            font-size: 1.2rem;
            font-weight: 700;
            color: var(--dark-color);
        }
        
        .price-value {
            color: var(--primary-color);
        }
        
        .order-actions {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }
        
        .action-btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            font-size: 0.875rem;
        }
        
        .btn-primary {
            background: var(--primary-gradient);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }
        
        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #ffc107, #e0a800);
            color: #212529;
        }
        
        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
        }
        
        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }
        
        .btn-outline:hover {
            background: var(--primary-color);
            color: white;
        }
        
        .order-details {
            display: none;
            padding: 1.5rem;
            background: #f8fafc;
            border-top: 1px solid var(--border-color);
        }
        
        .product-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .product-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: white;
            border-radius: var(--border-radius);
            margin-bottom: 0.75rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
        }
        
        .product-info {
            flex: 1;
        }
        
        .product-name {
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 0.25rem;
        }
        
        .product-details {
            font-size: 0.875rem;
            color: var(--text-muted);
        }
        
        .product-price {
            text-align: right;
            font-weight: 700;
            color: var(--primary-color);
        }
        
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            border: 1px solid var(--border-color);
        }
        
        .empty-icon {
            font-size: 4rem;
            color: var(--text-muted);
            margin-bottom: 1.5rem;
        }
        
        .empty-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--dark-color);
            margin-bottom: 1rem;
        }
        
        .empty-description {
            color: var(--text-muted);
            margin-bottom: 2rem;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .fade-in {
            animation: fadeInUp 0.6s ease-out forwards;
        }
        
        keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Responsive */
        media (max-width: 768px) {
            .order-meta {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }
            
            .order-summary {
                grid-template-columns: 1fr;
            }
            
            .order-actions {
                flex-direction: column;
            }
            
            .action-btn {
                justify-content: center;
            }
            
            .product-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .product-price {
                text-align: left;
            }
            
            .filter-buttons {
                justify-content: center;
            }
        }
    </style>
}

<div class="orders-container">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title vietnamese-font-fix">
            <i class="fas fa-shopping-bag me-3"></i>Đơn hàng của tôi
        </h1>
        <p class="page-subtitle vietnamese-font-fix">Quản lý và theo dõi tất cả đơn hàng của bạn</p>
    </div>

    @if (!Model.Any())
    {
        <!-- Empty State -->
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <h3 class="empty-title">Chưa có đơn hàng nào</h3>
            <p class="empty-description">
                Bạn chưa có đơn hàng nào. Hãy khám phá các sản phẩm tuyệt vời và tạo đơn hàng đầu tiên của bạn!
            </p>
            <a href="/Home/TrangChu" class="action-btn btn-primary">
                <i class="fas fa-shopping-bag me-2"></i>Bắt đầu mua sắm
            </a>
        </div>
    }
    else
    {
        <!-- Controls Section -->
        <div class="controls-section">
            <!-- Search Box -->
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="orderSearch" class="search-input" placeholder="Tìm kiếm theo mã đơn hàng hoặc sản phẩm..." onkeyup="searchOrders()">
            </div>
            
            <!-- Filter Buttons -->
            <div class="filter-buttons">
                <button class="filter-btn active vietnamese-font-fix" data-status="all" onclick="filterOrders('all')">
                    <i class="fas fa-list"></i>Tất cả
                </button>
                <button class="filter-btn vietnamese-font-fix" data-status="Chờ xác nhận" onclick="filterOrders('Chờ xác nhận')">
                    <i class="fas fa-clock"></i>Chờ xác nhận
                </button>
                <button class="filter-btn vietnamese-font-fix" data-status="Đã xác nhận" onclick="filterOrders('Đã xác nhận')">
                    <i class="fas fa-check"></i>Đã xác nhận
                </button>
                <button class="filter-btn vietnamese-font-fix" data-status="Chờ giao hàng" onclick="filterOrders('Chờ giao hàng')">
                    <i class="fas fa-box"></i>Chờ giao hàng
                </button>
                <button class="filter-btn vietnamese-font-fix" data-status="Đang giao" onclick="filterOrders('Đang giao')">
                    <i class="fas fa-truck"></i>Đang giao
                </button>
                <button class="filter-btn vietnamese-font-fix" data-status="Đã giao" onclick="filterOrders('Đã giao')">
                    <i class="fas fa-check-circle"></i>Đã giao
                </button>
                <button class="filter-btn vietnamese-font-fix" data-status="Đã hủy" onclick="filterOrders('Đã hủy')">
                    <i class="fas fa-times-circle"></i>Đã hủy
                </button>
            </div>
        </div>

        <!-- Result Info -->
        <div class="result-info">
            <span class="result-count"></span>
        </div>

        <!-- Orders List -->
        @foreach (var order in Model)
        {
            <div class="order-card" data-status="@order.Status">
                <!-- Order Header -->
                <div class="order-header">
                    <div class="order-meta">
                        <div>
                            <div class="order-id">Đơn hàng #@order.OrderId</div>
                            <div class="order-date">
                                <i class="fas fa-calendar-alt me-1"></i>
                                @order.CreatedAt?.ToString("dd/MM/yyyy HH:mm")
                            </div>
                        </div>
                        <div class="order-status @(GetStatusClass(order.Status)) vietnamese-font-fix">
                            @Html.Raw(GetStatusIcon(order.Status)) @order.Status
                        </div>
                    </div>
                </div>

                <!-- Order Body -->
                <div class="order-body">
                    <!-- Order Summary -->
                    <div class="order-summary">
                        <div class="summary-item">
                            <div class="summary-label">Tổng sản phẩm</div>
                            <div class="summary-value">@order.OrderDetails?.Count() SP</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Giá gốc</div>
                            <div class="summary-value price-value">@order.TotalAmount?.ToString("N0") ₫</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Thành tiền</div>
                            <div class="summary-value price-value">@order.FinalTotal?.ToString("N0") ₫</div>
                        </div>
                    </div>

                    <!-- Order Actions -->
                    <div class="order-actions">
                        <button type="button" class="action-btn btn-outline" onclick="toggleOrderDetails(this, @order.OrderId)" title="Xem chi tiết">
                            <i class="fas fa-chevron-down"></i>Chi tiết
                        </button>
                        
                        @using (Html.BeginForm("ViewOrderDetails", "Order", FormMethod.Post, new { style = "display: inline;" }))
                        {
                            <input type="hidden" name="orderId" value="@order.OrderId"/>
                            <button type="submit" class="action-btn btn-primary">
                                <i class="fas fa-eye"></i>Xem đơn hàng
                            </button>
                        }
                        
                        @if (order.Status == "Chờ xác nhận")
                        {
                            @using (Html.BeginForm("CancelOrder", "Order", FormMethod.Post, new { style = "display: inline;", onsubmit = "return confirm('Bạn có chắc chắn muốn hủy đơn hàng này không?');" }))
                            {
                                <input type="hidden" name="orderId" value="@order.OrderId" />
                                <button type="submit" class="action-btn btn-danger">
                                    <i class="fas fa-times"></i>Hủy đơn
                                </button>
                            }
                        }
                        
                        @using (Html.BeginForm("RepeatOrder", "Order", FormMethod.Post, new { style = "display: inline;", onsubmit = "return confirm('Bạn có chắc chắn muốn mua lại đơn hàng này không?');" }))
                        {
                            <input type="hidden" name="orderId" value="@order.OrderId" />
                            <button type="submit" class="action-btn btn-warning">
                                <i class="fas fa-redo"></i>Mua lại
                            </button>
                        }
                    </div>
                </div>

                <!-- Order Details (Hidden by default) -->
                <div id="details-@order.OrderId" class="order-details">
                    <h5 class="mb-3">
                        <i class="fas fa-list-ul me-2"></i>Chi tiết sản phẩm
                    </h5>
                    <ul class="product-list">
                        @foreach (var detail in order.OrderDetails)
                        {
                            <li class="product-item">
                                <div class="product-info">
                                    <div class="product-name">@detail.Product?.ProductName</div>
                                    <div class="product-details">
                                        Số lượng: @detail.Quantity | Đơn giá: @detail.UnitPrice?.ToString("N0") ₫
                                    </div>
                                </div>
                                <div class="product-price">
                                    @((detail.Quantity * detail.UnitPrice)?.ToString("N0")) ₫
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    }
</div>

@functions {
    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Chờ xác nhận" => "status-pending",
            "Đã xác nhận" => "status-confirmed",
            "Chờ giao hàng" => "status-await-shipping",
            "Đang giao" => "status-shipping",
            "Đã giao" => "status-delivered",
            "Đã hủy" => "status-cancelled",
            _ => "status-pending"
        };
    }
    
    public string GetStatusIcon(string status)
    {
        return status switch
        {
            "Chờ xác nhận" => "<i class='fas fa-clock'></i>",
            "Đã xác nhận" => "<i class='fas fa-check'></i>", 
            "Chờ giao hàng" => "<i class='fas fa-box'></i>",
            "Đang giao" => "<i class='fas fa-truck'></i>",
            "Đã giao" => "<i class='fas fa-check-circle'></i>",
            "Đã hủy" => "<i class='fas fa-times-circle'></i>",
            _ => "<i class='fas fa-clock'></i>"
        };
    }
}
