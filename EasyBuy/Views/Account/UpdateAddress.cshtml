@model EasyBuy.Models.Address

@{
    ViewBag.Title = "Cập nhật địa chỉ";
    Layout = "~/Views/Layout/_LayoutUser.cshtml";
}

@section Scripts {
    <script>
        // Form validation
        function validateForm() {
            const requiredFields = [
                { name: 'city', label: 'Thành phố' },
                { name: 'district', label: 'Quận/Huyện' },
                { name: 'ward', label: 'Phường/Xã' },
                { name: 'street', label: 'Đường/Số nhà' },
                { name: 'phone', label: 'Số điện thoại' }
            ];

            let isValid = true;
            let firstErrorField = null;

            // Clear all previous errors
            clearAllErrors();

            // Validate required fields
            requiredFields.forEach(field => {
                const input = document.querySelector(`[name="${field.name}"]`);
                const value = input.value.trim();

                if (value === '') {
                    showFieldError(input, `${field.label} là bắt buộc`);
                    isValid = false;
                    if (!firstErrorField) firstErrorField = input;
                }
            });

            // Phone validation
            const phoneInput = document.querySelector('[name="phone"]');
            const phoneValue = phoneInput.value.trim();

            if (phoneValue) {
                const phoneRegex = /^[0-9]{10,11}$/;
                if (!phoneRegex.test(phoneValue.replace(/\s/g, ''))) {
                    showFieldError(phoneInput, 'Số điện thoại phải có 10-11 chữ số');
                    isValid = false;
                    if (!firstErrorField) firstErrorField = phoneInput;
                }
            }

            // Focus on first error field
            if (firstErrorField) {
                firstErrorField.focus();
                firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }

            return isValid;
        }

        function showFieldError(input, message) {
            const formGroup = input.closest('.form-group');
            const errorDiv = document.createElement('div');
            errorDiv.className = 'field-error animate__animated animate__fadeIn';
            errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;

            input.classList.add('error');
            formGroup.appendChild(errorDiv);

            // Shake animation
            input.style.animation = 'shake 0.5s ease-in-out';
            setTimeout(() => {
                input.style.animation = '';
            }, 500);
        }

        function clearAllErrors() {
            document.querySelectorAll('.field-error').forEach(error => error.remove());
            document.querySelectorAll('.form-control').forEach(input => input.classList.remove('error'));
        }

        // Update full address preview
        function updateAddressPreview() {
            const street = document.getElementById('street').value.trim();
            const ward = document.getElementById('ward').value.trim();
            const district = document.getElementById('district').value.trim();
            const city = document.getElementById('city').value.trim();

            const addressParts = [street, ward, district, city].filter(part => part !== '');

            const preview = document.getElementById('fullAddressPreview');
            const previewIcon = document.getElementById('previewIcon');

            if (addressParts.length === 0) {
                preview.textContent = 'Nhập thông tin để xem trước địa chỉ đầy đủ';
                preview.className = 'text-muted fst-italic';
                previewIcon.className = 'fas fa-map-marker-alt text-muted';
            } else {
                preview.textContent = addressParts.join(', ');
                preview.className = 'text-dark fw-medium';
                previewIcon.className = 'fas fa-map-marker-alt text-success';
            }
        }

        // Auto-format phone number
        function formatPhoneNumber(input) {
            let value = input.value.replace(/\D/g, '');
            if (value.length > 0) {
                if (value.length <= 3) {
                    value = value;
                } else if (value.length <= 6) {
                    value = value.replace(/(\d{3})(\d+)/, '$1 $2');
                } else if (value.length <= 10) {
                    value = value.replace(/(\d{3})(\d{3})(\d+)/, '$1 $2 $3');
                } else {
                    value = value.replace(/(\d{3})(\d{3})(\d{4})(\d+)/, '$1 $2 $3 $4');
                }
            }
            input.value = value;
        }

        // Check for changes
        function checkForChanges() {
            const originalData = {
                city: '@Model?.City',
                district: '@Model?.District',
                ward: '@Model?.Ward',
                street: '@Model?.Street',
                phone: '@Model?.Phone'
            };

            const currentData = {
                city: document.getElementById('city').value.trim(),
                district: document.getElementById('district').value.trim(),
                ward: document.getElementById('ward').value.trim(),
                street: document.getElementById('street').value.trim(),
                phone: document.getElementById('phone').value.trim()
            };

            const hasChanges = Object.keys(originalData).some(key =>
                originalData[key] !== currentData[key]
            );

            const updateBtn = document.getElementById('updateBtn');
            const changeIndicator = document.getElementById('changeIndicator');

            if (hasChanges) {
                updateBtn.classList.add('has-changes');
                changeIndicator.style.display = 'block';
            } else {
                updateBtn.classList.remove('has-changes');
                changeIndicator.style.display = 'none';
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Add fade-in animation to form
            const form = document.querySelector('.address-form');
            form.style.opacity = '0';
            form.style.transform = 'translateY(30px)';

            setTimeout(() => {
                form.style.transition = 'all 0.5s ease-out';
                form.style.opacity = '1';
                form.style.transform = 'translateY(0)';
            }, 100);

            // Add event listeners for address preview
            const addressFields = ['street', 'ward', 'district', 'city'];
            addressFields.forEach(field => {
                const element = document.getElementById(field);
                if (element) {
                    element.addEventListener('input', function() {
                        updateAddressPreview();
                        checkForChanges();
                    });
                    element.addEventListener('blur', updateAddressPreview);
                }
            });

            // Phone number formatting and change detection
            const phoneInput = document.getElementById('phone');
            if (phoneInput) {
                phoneInput.addEventListener('input', function() {
                    formatPhoneNumber(this);
                    checkForChanges();
                });
            }

            // Real-time validation
            const inputs = document.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '') {
                        this.classList.remove('error');
                        const errorDiv = this.closest('.form-group').querySelector('.field-error');
                        if (errorDiv) {
                            errorDiv.remove();
                        }
                    }
                });
            });

            // Initial preview update
            updateAddressPreview();
            checkForChanges();
        });
    </script>

    <style>
        .address-form-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
        }

            .page-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 50%;
                transform: translateX(-50%);
                width: 100px;
                height: 4px;
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                border-radius: 2px;
            }

        .page-title {
            font-size: 2.8rem;
            font-weight: 900;
            color: #2c3e50;
            margin-bottom: 1rem;
            margin-top: 1rem;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .page-subtitle {
            font-size: 1.2rem;
            color: #6c757d;
            margin-bottom: 2rem;
            font-weight: 400;
        }

        .address-info {
            background: linear-gradient(135deg, #e8f5e8 0%, #f0f9ff 100%);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            border: 1px solid #c3e6cb;
        }

            .address-info h6 {
                color: #155724;
                font-weight: 600;
                margin-bottom: 1rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

        .address-info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(21, 87, 36, 0.1);
        }

            .address-info-item:last-child {
                border-bottom: none;
            }

        .address-info-label {
            font-weight: 500;
            color: #155724;
        }

        .address-info-value {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .address-form {
            background: white;
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid #e9ecef;
            position: relative;
            overflow: hidden;
        }

            .address-form::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            }

        .form-section {
            margin-bottom: 2.5rem;
            padding: 1.5rem;
            background: #f8f9fa;
            border-radius: 12px;
            border: 1px solid #e9ecef;
        }

        .form-section-title {
            font-size: 1.4rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            position: relative;
        }

            .form-section-title::after {
                content: '';
                flex: 1;
                height: 2px;
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                border-radius: 1px;
            }

            .form-section-title i {
                font-size: 1.2rem;
                color: #28a745;
            }

        .form-group {
            margin-bottom: 1.5rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.75rem;
                font-weight: 600;
                color: #2c3e50;
                font-size: 0.95rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

                .form-group label i {
                    color: #28a745;
                    width: 18px;
                }

        .form-control {
            width: 100%;
            padding: 0.875rem 1.25rem;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;
            font-family: inherit;
        }

            .form-control:focus {
                border-color: #28a745;
                box-shadow: 0 0 0 4px rgba(40, 167, 69, 0.1);
                outline: none;
                transform: translateY(-1px);
            }

            .form-control.error {
                border-color: #dc3545;
                box-shadow: 0 0 0 4px rgba(220, 53, 69, 0.1);
            }

            .form-control::placeholder {
                color: #adb5bd;
                font-style: italic;
            }

        .field-error {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            padding: 0.5rem;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 6px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .address-preview {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-radius: 12px;
            border: 2px dashed #dee2e6;
            min-height: 80px;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

            .address-preview:hover {
                border-color: #28a745;
                background: linear-gradient(135deg, #f8f9fa 0%, #e8f5e8 100%);
            }

        .change-indicator {
            display: none;
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            color: white;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            text-align: center;
            font-weight: 600;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            margin-top: 3rem;
            padding-top: 2rem;
            border-top: 2px solid #e9ecef;
            justify-content: center;
        }

        .btn-update {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            border: none;
            color: white;
            padding: 1rem 2.5rem;
            border-radius: 12px;
            font-weight: 700;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

            .btn-update:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
            }

            .btn-update:active {
                transform: translateY(-1px);
            }

            .btn-update.has-changes {
                background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
                box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
            }

                .btn-update.has-changes:hover {
                    box-shadow: 0 8px 25px rgba(255, 193, 7, 0.4);
                }

        .btn-cancel {
            background: #6c757d;
            border: none;
            color: white;
            padding: 1rem 2.5rem;
            border-radius: 12px;
            font-weight: 700;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }

            .btn-cancel:hover {
                background: #5a6268;
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
                color: white;
            }

        .btn-delete {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            border: none;
            color: white;
            padding: 1rem 2.5rem;
            border-radius: 12px;
            font-weight: 700;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }

            .btn-delete:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(220, 53, 69, 0.4);
            }

        .alert {
            padding: 1.25rem;
            margin-bottom: 2rem;
            border-radius: 12px;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-weight: 500;
            border: none;
        }

        .alert-danger {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
            color: #721c24;
        }

        .alert-success {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            color: #155724;
        }

        .alert i {
            font-size: 1.2rem;
        }

        /* Animations */
        keyframes shake {
            0%, 100%

        {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }

        }

        keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        keyframes pulse {
            0%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }

        }

        /* Responsive Design */
        media (max-width: 768px) {
            .address-form-container

        {
            padding: 1rem 0.5rem;
        }

        .page-title {
            font-size: 2.2rem;
        }

        .address-form {
            padding: 1.5rem;
        }

        .form-section {
            padding: 1rem;
        }

        .form-actions {
            flex-direction: column;
        }

        .btn-update, .btn-cancel, .btn-delete {
            width: 100%;
            justify-content: center;
        }

        }

        /* Loading state */
        .btn-update.loading {
            position: relative;
            color: transparent;
        }

            .btn-update.loading::after {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 20px;
                height: 20px;
                border: 2px solid rgba(255, 255, 255, 0.3);
                border-top: 2px solid white;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

        keyframes spin {
            0%

        {
            transform: translate(-50%, -50%) rotate(0deg);
        }

        100% {
            transform: translate(-50%, -50%) rotate(360deg);
        }

        }
    </style>
}

<div class="address-form-container">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-edit"></i>
            Cập nhật địa chỉ
        </h1>
        <p class="page-subtitle">Chỉnh sửa thông tin địa chỉ giao hàng của bạn</p>
    </div>

    <!-- Address Info -->
    @if (Model != null)
    {
        <div class="address-info">
            <h6>
                <i class="fas fa-info-circle"></i>
                Thông tin địa chỉ hiện tại
            </h6>
            <div class="row">
                <div class="col-md-6">
                    <div class="address-info-item">
                        <span class="address-info-label">Mã địa chỉ:</span>
                        <span class="address-info-value">#@Model.AddressId</span>
                    </div>
                </div>
                <div class="col-md-6">
                    @if (Model.CreatedAt.HasValue)
                    {
                        <div class="address-info-item">
                            <span class="address-info-label">Ngày tạo:</span>
                            <span class="address-info-value">@Model.CreatedAt.Value.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Form -->
    <div class="address-form">
        @if (ViewBag.MS != null)
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i>
                @ViewBag.MS
            </div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i>
                @TempData["Success"]
            </div>
        }

        <div id="changeIndicator" class="change-indicator">
            <i class="fas fa-exclamation-triangle"></i>
            Bạn có những thay đổi chưa được lưu
        </div>
        @using (Html.BeginForm("UpdateAddress", "Account", FormMethod.Post, new { @class = "change-password-form" }))
        {
            <input type="hidden" name="addressId" value="@Model?.AddressId" />

            <!-- Address Information Section -->
            <div class="form-section">
                <div class="form-section-title">
                    <i class="fas fa-map-marked-alt"></i>
                    Thông tin địa chỉ
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="city">
                                <i class="fas fa-city"></i>
                                Thành phố/Tỉnh
                            </label>
                            <input type="text"
                                   id="city"
                                   name="city"
                                   class="form-control"
                                   value="@Model?.City"
                                   placeholder="Ví dụ: Thành phố Hồ Chí Minh"
                                   required
                                   autocomplete="address-level1" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="district">
                                <i class="fas fa-building"></i>
                                Quận/Huyện
                            </label>
                            <input type="text"
                                   id="district"
                                   name="district"
                                   class="form-control"
                                   value="@Model?.District"
                                   placeholder="Ví dụ: Quận 1"
                                   required
                                   autocomplete="address-level2" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="ward">
                                <i class="fas fa-map-signs"></i>
                                Phường/Xã
                            </label>
                            <input type="text"
                                   id="ward"
                                   name="ward"
                                   class="form-control"
                                   value="@Model?.Ward"
                                   placeholder="Ví dụ: Phường Bến Nghé"
                                   required
                                   autocomplete="address-level3" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="street">
                                <i class="fas fa-road"></i>
                                Đường/Số nhà
                            </label>
                            <input type="text"
                                   id="street"
                                   name="street"
                                   class="form-control"
                                   value="@Model?.Street"
                                   placeholder="Ví dụ: 123 Đường Nguyễn Huệ"
                                   required
                                   autocomplete="street-address" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Contact Information Section -->
            <div class="form-section">
                <div class="form-section-title">
                    <i class="fas fa-phone"></i>
                    Thông tin liên hệ
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="phone">
                                <i class="fas fa-mobile-alt"></i>
                                Số điện thoại
                            </label>
                            <input type="tel"
                                   id="phone"
                                   name="phone"
                                   class="form-control"
                                   value="@Model?.Phone"
                                   placeholder="Ví dụ: 0901 234 567"
                                   required
                                   autocomplete="tel" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>
                                <i class="fas fa-eye"></i>
                                Xem trước địa chỉ
                            </label>
                            <div class="address-preview">
                                <i id="previewIcon" class="fas fa-map-marker-alt text-success"></i>
                                <div>
                                    <div id="fullAddressPreview" class="text-dark fw-medium">
                                        @Model?.FullAddress
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
                <button type="submit" class="btn-update" id="updateBtn">
                    <i class="fas fa-save"></i>
                    Cập nhật địa chỉ
                </button>
                <a href="@Url.Action("ListAdress", "Account")" class="btn-cancel">
                    <i class="fas fa-arrow-left"></i>
                    Quay lại danh sách
                </a>
                <button type="button" class="btn-delete" onclick="confirmDelete()">
                    <i class="fas fa-trash"></i>
                    Xóa địa chỉ
                </button>
            </div>
        }

    </div>
</div>

<script>
    // Add loading state to update button
    document.getElementById('addressForm').addEventListener('submit', function() {
        if (validateForm()) {
            const updateBtn = document.getElementById('updateBtn');
            updateBtn.classList.add('loading');
            updateBtn.disabled = true;
        }
    });

    // Confirm delete
    function confirmDelete() {
        if (confirm('Bạn có chắc chắn muốn xóa địa chỉ này?\n\nHành động này không thể hoàn tác!')) {
            window.location.href = '@Url.Action("DeleteAddress", "Account", new { id = Model?.AddressId })';
        }
    }

    // Warn before leaving if there are unsaved changes
    window.addEventListener('beforeunload', function(e) {
        const changeIndicator = document.getElementById('changeIndicator');
        if (changeIndicator.style.display === 'block') {
            e.preventDefault();
            e.returnValue = '';
            return '';
        }
    });
</script>